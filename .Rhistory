xlab = "Pasos",
ylab = "HORAS",
col = rainbow(6),
names.arg = info2021$Proceso,
beside = TRUE
)
info2021<-info2021%>%order_by(asc)
info2021<-info2021%>%order_by(max)
info2021<-info2021%>%order_by(order)
info2021<-info2021%>%order_by(desc)
#agrupar
info2021<-info2021%>%order_by(desc())
#agrupar
info2021<-info2021%>%order_by(value)
info2021<-info2021%>%order_by(value)
info2021<-info2021%>%order_by(order(value,decreasing = TRUE))
info2021<-order_by(order(info2021$value,decreasing = TRUE))
info2021<-order_by(order(info2021$value,decreasing = TRUE))
info2021<-(order(info2021$value,decreasing = TRUE))
info2021<-order(info2021$value,decreasing = TRUE)
#*idea, usar pivot_longer o crear dos colunmas para poner en una los nombres de
#*los procesos y en la siguiente su valor en mediana y standard deviation*#
test<-type.convert(test2021[13:18])
test <-
test %>% summarise(
TACA = mean(abs(TACA)),
TSCC = mean(abs(TSCC)),
TACC = mean(abs(TACC)),
TCPD = mean(abs(TCPD)),
TIF = mean(abs(TIF)),
TiempoTotal = mean(abs(TiempoTotal))
)
info2021<-test%>%pivot_longer(cols = starts_with("T"),names_to = "Proceso")
rm(test)
#agrupar
info2021<-order(info2021$value,decreasing = TRUE)
info2021
#*idea, usar pivot_longer o crear dos colunmas para poner en una los nombres de
#*los procesos y en la siguiente su valor en mediana y standard deviation*#
test<-type.convert(test2021[13:18])
test <-
test %>% summarise(
TACA = mean(abs(TACA)),
TSCC = mean(abs(TSCC)),
TACC = mean(abs(TACC)),
TCPD = mean(abs(TCPD)),
TIF = mean(abs(TIF)),
TiempoTotal = mean(abs(TiempoTotal))
)
info2021<-test%>%pivot_longer(cols = starts_with("T"),names_to = "Proceso")
rm(test)
View(info2021)
#Gráficas pendiente#
barplot(
info2021$value, #datos
main = "Inscripción 2021",
xlab = "Pasos",
ylab = "HORAS",
col = rainbow(6),
names.arg = info2021$Proceso,
beside = TRUE
)
#agrupar
info2021<-info2021%>%arrange(desc(value))
#Gráficas pendiente#
barplot(
info2021$value, #datos
main = "Inscripción 2021",
xlab = "Pasos",
ylab = "HORAS",
col = rainbow(6),
names.arg = info2021$Proceso,
beside = TRUE
)
#*en horas*#
test2021 <- test2021 %>%
mutate(
TACA = round(difftime(Proceso2, Proceso1, units = "hours"),3),
TSCC = round(difftime(Proceso3,Proceso2,units = "hours"),3),
TACC = round(difftime(Proceso4, Proceso3, units = "hours"),3),
TCPD = round(difftime(if_else(is.na(Proceso6bis), Proceso6, Proceso6bis), Proceso5, units = "hours"),3),
TIF  = round(difftime(Proceso7,if_else(is.na(Proceso6),Proceso6bis,Proceso6),units = "hours"),3),
TiempoTotal = round(difftime(Proceso7, Proceso1, units = "hours"),3)
)
#*idea, usar pivot_longer o crear dos colunmas para poner en una los nombres de
#*los procesos y en la siguiente su valor en mediana y standard deviation*#
test<-type.convert(test2021[13:18])
test <-
test %>% summarise(
TACA = mean(abs(TACA)),
TSCC = mean(abs(TSCC)),
TACC = mean(abs(TACC)),
TCPD = mean(abs(TCPD)),
TIF = mean(abs(TIF)),
#TiempoTotal = mean(abs(TiempoTotal))
)
info2021<-test%>%pivot_longer(cols = starts_with("T"),names_to = "Proceso")
rm(test)
#agrupar
info2021<-info2021%>%arrange(desc(value))
#Gráficas pendiente#
barplot(
info2021$value, #datos
main = "Inscripción 2021",
xlab = "Pasos",
ylab = "HORAS",
col = rainbow(6),
names.arg = info2021$Proceso,
beside = TRUE
)
library(qcc)
info2021%>%info2021
info2021<-info2021%>%as.factor(info2021$Proceso)
info2021<-info2021%>%as.factor(info2021$Proceso)
info2021<-info2021%>%as.factor(Proceso)
info2021<-info2021%>%as.factor(Proceso)
View(info2021)
as.factor(info2021$Proceso)
info2021<-as.factor(info2021$Proceso)
#*idea, usar pivot_longer o crear dos colunmas para poner en una los nombres de
#*los procesos y en la siguiente su valor en mediana y standard deviation*#
test<-type.convert(test2021[13:18])
test <-
test %>% summarise(
TACA = mean(abs(TACA)),
TSCC = mean(abs(TSCC)),
TACC = mean(abs(TACC)),
TCPD = mean(abs(TCPD)),
TIF = mean(abs(TIF)),
#TiempoTotal = mean(abs(TiempoTotal))
)
info2021<-test%>%pivot_longer(cols = starts_with("T"),names_to = "Proceso")
rm(test)
info2021
#agrupar
info2021<-info2021%>%arrange(desc(value))
info2021<-info2021%>%select(as.factor(Proceso),value)
info2021<-info2021%>%select(as.factor(Proceso),value)
info2021<-info2021%>%mutate(as.factor(Proceso))
info2021<-info2021%>%mutate(Proceso = as.factor(Proceso))
info2021<-info2021%>%select(-as.factor(Proceso))
pareto.chart(info2021,col=rainbow(length(info2021)),main = "Inscripción")
rm(info2021)
#*idea, usar pivot_longer o crear dos colunmas para poner en una los nombres de
#*los procesos y en la siguiente su valor en mediana y standard deviation*#
test<-type.convert(test2021[13:18])
test <-
test %>% summarise(
TACA = mean(abs(TACA)),
TSCC = mean(abs(TSCC)),
TACC = mean(abs(TACC)),
TCPD = mean(abs(TCPD)),
TIF = mean(abs(TIF)),
#TiempoTotal = mean(abs(TiempoTotal))
)
info2021<-test%>%pivot_longer(cols = starts_with("T"),names_to = "Proceso")
rm(test)
#agrupar
info2021<-info2021%>%arrange(desc(value))
info2021<-info2021%>%mutate(Proceso = as.factor(Proceso))
pareto.chart(info2021,col=rainbow(length(info2021)),main = "Inscripción")
tabla = table(info2021$Proceso)
pareto.chart(tabla,col=rainbow(length(tabla)),main = "Inscripción")
View(test2022)
test2022 <- data2022 %>%
select(-...1) %>%
pivot_wider(names_from = Proceso,
values_from = HoraRegistro,
values_fn = last)
test2022 <-
test2022 %>% rename(
Proceso0 = `Asignación de Carga Académica Automática`,
Proceso1 = `Solicitud de Carga Académica`,
Proceso2 = `Asignación de Carga Académica`,
Proceso3 = `Solicitud de Cálculo de Cobro`,
Proceso4 = `Asignación de Cálculo de Cobro`,
Proceso5 = `Pago Deposito/Tranferencia`,
Proceso6 = `Confirmación Pago Deposito`,
Proceso6bis = `Confirmación de Pago en Línea`,
Proceso7 = `Inscripción Finalizada`
)
test2022<-test2022%>%
filter(
!is.na(Proceso7),
!is.na(Proceso1),
!is.na(Proceso5),
!is.na(Proceso3)
)
test2022 <- test2022 %>%
mutate(
TACA = round(if_else(is.na(Proceso0),difftime(Proceso2, Proceso1, units = "hours"), as.difftime(0, units = "hours")),3),
TSCC = round(difftime(Proceso3,if_else(is.na(Proceso2),Proceso0,Proceso2),units = "hours"),3),
TACC = round(difftime(Proceso4, Proceso3, units = "hours"),3),
TCPD = round(difftime(if_else(is.na(Proceso6bis), Proceso6, Proceso6bis), Proceso5, units = "hours"),3),
TIF  = round(difftime(Proceso7,if_else(is.na(Proceso6),Proceso6bis,Proceso6),units = "hours"),3),
#TiempoTotal = round(difftime(Proceso7, Proceso1, units = "hours"),3)
)
test<-type.convert(test2022[14:18])
test <-
test %>% summarise(
AcaMedia = mean(abs(TiempoCargaAcademica)),
AcaSD = sd(abs(TiempoCargaAcademica)),
TiempoMuerto1Media = mean(abs(TiempoMuerto1)),
TiempoMuerto1SD = sd(abs(TiempoMuerto1)),
CalMedia = mean(abs(TiempoCalculoCobro)),
CalSD = sd(abs(TiempoCalculoCobro)),
TiempoMuerto2Media = mean(abs(TiempoMuerto2)),
TiempoMuerto2SD = sd(abs(TiempoMuerto2)),
PagMedia = mean(abs(TiempoPago)),
PagSD = sd(abs(TiempoPago)),
ConMedia = mean(abs(TiempoConfirmacionInscripcion)),
ConSD = sd(abs(TiempoConfirmacionInscripcion)),
TotMedia = mean(abs(TiempoTotal)),
TotSD = sd(abs(TiempoTotal))
)
test <-
st <-
test %>% summarise(
TACA = mean(abs(TACA)),
TSCC = mean(abs(TSCC)),
TACC = mean(abs(TACC)),
TCPD = mean(abs(TCPD)),
TIF = mean(abs(TIF)),
#TiempoTotal = mean(abs(TiempoTotal))
)
info2022<-test%>%pivot_longer(cols = starts_with("T"),names_to = "Proceso")
rm(test)
test <-
test %>% summarise(
TACA = mean(abs(TACA)),
TSCC = mean(abs(TSCC)),
TACC = mean(abs(TACC)),
TCPD = mean(abs(TCPD)),
TIF = mean(abs(TIF)),
#TiempoTotal = mean(abs(TiempoTotal))
)
info2022<-test%>%pivot_longer(cols = starts_with("T"),names_to = "Proceso")
rm(test)
test2022 <- test2022 %>%
mutate(
TACA = round(if_else(is.na(Proceso0),difftime(Proceso2, Proceso1, units = "hours"), as.difftime(0, units = "hours")),3),
TSCC = round(difftime(Proceso3,if_else(is.na(Proceso2),Proceso0,Proceso2),units = "hours"),3),
TACC = round(difftime(Proceso4, Proceso3, units = "hours"),3),
TCPD = round(difftime(if_else(is.na(Proceso6bis), Proceso6, Proceso6bis), Proceso5, units = "hours"),3),
TIF  = round(difftime(Proceso7,if_else(is.na(Proceso6),Proceso6bis,Proceso6),units = "hours"),3),
#TiempoTotal = round(difftime(Proceso7, Proceso1, units = "hours"),3)
)
test<-type.convert(test2022[14:18])
test <-
test %>% summarise(
TACA = mean(abs(TACA)),
TSCC = mean(abs(TSCC)),
TACC = mean(abs(TACC)),
TCPD = mean(abs(TCPD)),
TIF = mean(abs(TIF)),
#TiempoTotal = mean(abs(TiempoTotal))
)
info2022<-test%>%pivot_longer(cols = starts_with("T"),names_to = "Proceso")
rm(test)
info2022<-info2022%>%arrange(desc(value))
barplot(
info2022$value, #datos
main = "Inscripción 2022",
xlab = "Pasos",
ylab = "HORAS",
col = rainbow(2),
names.arg = info2022$Proceso,
legend.text = c("Media","S.D."),
args.legend = list(x = "top", inset = c(-20,0)),
beside = TRUE
)
barplot(
info2022$value, #datos
main = "Inscripción 2022",
xlab = "Pasos",
ylab = "HORAS",
col = rainbow(6),
names.arg = info2022$Proceso,
beside = TRUE
)
rm(st)
tabla
View(test2021)
rm(info2021,info2022)
View(test2021)
View(test2022)
rm(test2021,test2022)
#Trasponer proceso con su hora de registro *arreglar problema de formato - listo*
test2021 <- data2021 %>%
select(-...1) %>%
pivot_wider(names_from = Proceso,
values_from = HoraRegistro,
values_fn = last)
test2022 <- data2022 %>%
select(-...1) %>%
pivot_wider(names_from = Proceso,
values_from = HoraRegistro,
values_fn = last)
#Renombrar
test2021 <-
test2021 %>% rename(
Proceso1 = `Solicitud de Carga Académica`,
Proceso2 = `Asignación de Carga Académica`,
Proceso3 = `Solicitud de Cálculo de Cobro`,
Proceso4 = `Asignación de Cálculo de Cobro`,
Proceso5 = `Pago Deposito/Tranferencia`,
Proceso6 = `Confirmación Pago Deposito`,
Proceso6bis = `Confirmación de Pago en Línea`,
Proceso7 = `Inscripción Finalizada`
)
test2022 <-
test2022 %>% rename(
Proceso0 = `Asignación de Carga Académica Automática`,
Proceso1 = `Solicitud de Carga Académica`,
Proceso2 = `Asignación de Carga Académica`,
Proceso3 = `Solicitud de Cálculo de Cobro`,
Proceso4 = `Asignación de Cálculo de Cobro`,
Proceso5 = `Pago Deposito/Tranferencia`,
Proceso6 = `Confirmación Pago Deposito`,
Proceso6bis = `Confirmación de Pago en Línea`,
Proceso7 = `Inscripción Finalizada`
)
#Limpiar datos, excluir los que no van a servir#
test2021<-test2021%>%
filter(
!is.na(Proceso7),
!is.na(Proceso1),
!is.na(Proceso5),
!is.na(Proceso3)
)
test2022<-test2022%>%
filter(
!is.na(Proceso7),
!is.na(Proceso1),
!is.na(Proceso5),
!is.na(Proceso3)
)
#*en horas*#
test2021 <- test2021 %>%
mutate(
TACA = round(difftime(Proceso2, Proceso1, units = "hours"),3),
TSCC = round(difftime(Proceso3,Proceso2,units = "hours"),3),
TACC = round(difftime(Proceso4, Proceso3, units = "hours"),3),
TCPD = round(difftime(if_else(is.na(Proceso6bis), Proceso6, Proceso6bis), Proceso5, units = "hours"),3),
TIF  = round(difftime(Proceso7,if_else(is.na(Proceso6),Proceso6bis,Proceso6),units = "hours"),3),
#TiempoTotal = round(difftime(Proceso7, Proceso1, units = "hours"),3)
)
test2022 <- test2022 %>%
mutate(
TACA = round(if_else(is.na(Proceso0),difftime(Proceso2, Proceso1, units = "hours"), as.difftime(0, units = "hours")),3),
TSCC = round(difftime(Proceso3,if_else(is.na(Proceso2),Proceso0,Proceso2),units = "hours"),3),
TACC = round(difftime(Proceso4, Proceso3, units = "hours"),3),
TCPD = round(difftime(if_else(is.na(Proceso6bis), Proceso6, Proceso6bis), Proceso5, units = "hours"),3),
TIF  = round(difftime(Proceso7,if_else(is.na(Proceso6),Proceso6bis,Proceso6),units = "hours"),3),
#TiempoTotal = round(difftime(Proceso7, Proceso1, units = "hours"),3)
)
View(test2021)
test2021<-test2021%>%mutate(Frecuencia = desc(TACA:TIF))
#*cual proceso te toma mas tiempo
#por matricula cual proceso es mas largo
#pareto
#nuevo campo en el registro y evaluar el mayor
#ejemplo pareto
test2021<-test2021%>%mutate(Frecuencia = if_any(TACA:TIF,max))
#*cual proceso te toma mas tiempo
#por matricula cual proceso es mas largo
#pareto
#nuevo campo en el registro y evaluar el mayor
#ejemplo pareto
test2021<-type.convert(test2021)
test2021<-test2021%>%mutate(Frecuencia = if_any(TACA:TIF,max))
test2021<-test2021%>%mutate(Frecuencia = if_any(TACA:TIF,last))
test2021$TACA:TIF
test2021[TACA:TIF]
test2021(TACA:TI)
test2021%>%select(TACA:TI)
test2021%>%select(TACA:TIf)
test2021%>%select(TACA:TIF)
test2021<-test2021%>%mutate(Frecuencia = pmax(TACA:TIF))
test2021<-test2021%>%mutate(Frecuencia = pmax(TACA,TSCC,TACC,TCPD,TIF))
test2021 <-
test2021 %>% mutate(Frecuencia = if_else(pmax(TACA, TSCC, TACC, TCPD, TIF)) =
)
source("C:/Users/Toacs/Desktop/ProyectoEstadistica/ProyectoEstadistico/script R.R", encoding = 'UTF-8', echo=TRUE)
test2021 <-
test2021 %>% mutate(Frecuencia = if_else(pmax(TACA, TSCC, TACC, TCPD, TIF)) == TACA, as.factor(ACA),
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TSCC, as.factor(SCC),
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TACC, as.factor(ACC),
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TCPD, as.factor(CPD),
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TIF, as.factor(TIF),)))))
test2021 <-
test2021 %>% mutate(Frecuencia = if_else(pmax(TACA, TSCC, TACC, TCPD, TIF)) == TACA, as.factor(ACA),
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TSCC, as.factor(SCC),
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TACC, as.factor(ACC),
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TCPD, as.factor(CPD),
if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TIF){as.factor(TIF)}))))
test2021 <-
test2021 %>% mutate(Frecuencia = if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TCPD,"TCPD","NO"))
test2021 <-
test2021 %>% mutate(Frecuencia = if_else() == TACA, "TACA",
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TSCC, "TSCC",
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TACC, "TACC",
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TCPD, "TCPD",
if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TIF){"TIF"}))))
test2021 <-
test2021 %>% mutate(Frecuencia = if_else(pmax(TACA, TSCC, TACC, TCPD, TIF)) == TACA, "TACA",
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TSCC, "TSCC",
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TACC, "TACC",
if_else(pmax(TACA, TSCC, TACC, TCPD, TIF) == TCPD, "TCPD",
if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TIF){"TIF"}))))
test2021 <-
test2021 %>% mutate(Frecuencia = if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TACA){"TACA"}|if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TSCC){"TSCC"}|if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TACC){"TACC"}|if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TCPD){"TCPD"}|if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TIF){"TIF"})
test2021 <-
test2021 %>% mutate(Frecuencia = if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TACA){"TACA"}else if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TSCC){"TSCC"}else if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TACC){"TACC"}else if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TCPD){"TCPD"}else if(pmax(TACA, TSCC, TACC, TCPD, TIF) == TIF){"TIF"})
test2021 <-
test2021 %>% mutate(Frecuencia = if (pmax(TACA, TSCC, TACC, TCPD, TIF) == TACA) {
"TACA"
} else if (pmax(TSCC, TACC, TCPD, TIF) == TSCC) {
"TSCC"
} else if (pmax(TACC, TCPD, TIF) == TACC) {
"TACC"
} else if (pmax(TCPD, TIF) == TCPD) {
"TCPD"
} else{
"TIF"
})
test2021 <-
test2021 %>% mutate(Frecuencia = ifelse(pmax(TACA, TSCC, TACC, TCPD, TIF) ==TACA,"TACA",ifelse(pmax(TSCC, TACC, TCPD, TIF) ==TSCC,"TSCC",ifelse(pmax(TACC, TCPD, TIF) ==TACC,"TACC",ifelse(pmax(TCPD, TIF)==TCPD,"TCPD","TIF")))))
tabla = table(as.factor(test2021$Frecuencia))
pareto.chart(tabla,col=rainbow(length(tabla)),main = "Inscripción")
rm(test2021,test2022)
#Trasponer proceso con su hora de registro *arreglar problema de formato - listo*
test2021 <- data2021 %>%
select(-...1) %>%
pivot_wider(names_from = Proceso,
values_from = HoraRegistro,
values_fn = last)
#Renombrar
test2021 <-
test2021 %>% rename(
Proceso1 = `Solicitud de Carga Académica`,
Proceso2 = `Asignación de Carga Académica`,
Proceso3 = `Solicitud de Cálculo de Cobro`,
Proceso4 = `Asignación de Cálculo de Cobro`,
Proceso5 = `Pago Deposito/Tranferencia`,
Proceso6 = `Confirmación Pago Deposito`,
Proceso6bis = `Confirmación de Pago en Línea`,
Proceso7 = `Inscripción Finalizada`
)
#Limpiar datos, excluir los que no van a servir#
test2021<-test2021%>%
filter(
!is.na(Proceso7),
!is.na(Proceso1),
!is.na(Proceso5),
!is.na(Proceso3)
)
#*en horas*#
test2021 <- test2021 %>%
mutate(
TACA = round(difftime(Proceso2, Proceso1, units = "hours"),3),
TSCC = round(difftime(Proceso3,Proceso2,units = "hours"),3),
TACC = round(difftime(Proceso4, Proceso3, units = "hours"),3),
TCPD = round(difftime(if_else(is.na(Proceso6bis), Proceso6, Proceso6bis), Proceso5, units = "hours"),3),
TIF  = round(difftime(Proceso7,if_else(is.na(Proceso6bis),Proceso6,Proceso6bis),units = "hours"),3)
#TiempoTotal = round(difftime(Proceso7, Proceso1, units = "hours"),3)
)
View(RegisterData)
View(test2021)
test2021<-type.convert(test2021)
test2021 <-
test2021 %>% mutate(Frecuencia = ifelse(pmax(TACA, TSCC, TACC, TCPD, TIF) ==TACA,"TACA",ifelse(pmax(TSCC, TACC, TCPD, TIF) ==TSCC,"TSCC",ifelse(pmax(TACC, TCPD, TIF) ==TACC,"TACC",ifelse(pmax(TCPD, TIF)==TCPD,"TCPD","TIF")))))
tabla = table(as.factor(test2021$Frecuencia))
pareto.chart(tabla,col=rainbow(length(tabla)),main = "Inscripción")
test2022 <- data2022 %>%
select(-...1) %>%
pivot_wider(names_from = Proceso,
values_from = HoraRegistro,
values_fn = last)
test2022 <-
test2022 %>% rename(
Proceso0 = `Asignación de Carga Académica Automática`,
Proceso1 = `Solicitud de Carga Académica`,
Proceso2 = `Asignación de Carga Académica`,
Proceso3 = `Solicitud de Cálculo de Cobro`,
Proceso4 = `Asignación de Cálculo de Cobro`,
Proceso5 = `Pago Deposito/Tranferencia`,
Proceso6 = `Confirmación Pago Deposito`,
Proceso6bis = `Confirmación de Pago en Línea`,
Proceso7 = `Inscripción Finalizada`
)
test2022<-test2022%>%
filter(
!is.na(Proceso7),
!is.na(Proceso1),
!is.na(Proceso5),
!is.na(Proceso3)
)
test2022 <- test2022 %>%
mutate(
TACA = round(if_else(is.na(Proceso0),difftime(Proceso2, Proceso1, units = "hours"), as.difftime(0, units = "hours")),3),
TSCC = round(difftime(Proceso3,if_else(is.na(Proceso2),Proceso0,Proceso2),units = "hours"),3),
TACC = round(difftime(Proceso4, Proceso3, units = "hours"),3),
TCPD = round(difftime(if_else(is.na(Proceso6bis), Proceso6, Proceso6bis), Proceso5, units = "hours"),3),
TIF  = round(difftime(Proceso7,if_else(is.na(Proceso6),Proceso6bis,Proceso6),units = "hours"),3)
#TiempoTotal = round(difftime(Proceso7, Proceso1, units = "hours"),3)
)
test2022<-type.convert(test2022)
test2022 <-
test2022 %>% mutate(Frecuencia = ifelse(pmax(TACA, TSCC, TACC, TCPD, TIF) ==TACA,"TACA",ifelse(pmax(TSCC, TACC, TCPD, TIF) ==TSCC,"TSCC",ifelse(pmax(TACC, TCPD, TIF) ==TACC,"TACC",ifelse(pmax(TCPD, TIF)==TCPD,"TCPD","TIF")))))
tabla = table(as.factor(test2022$Frecuencia))
pareto.chart(tabla,col=rainbow(length(tabla)),main = "Inscripción")
